#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Openwrt WR941ND

on:
  push:
    branches:
      - master
    paths:
      - 'wr941nd.config'
      - 'wr941nd.sh'
  schedule:
    - cron: 40 15 1/1 * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-19.07
  CONFIG_FILE: wr941nd.config
  DIY_SH: wr941nd.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: America/Sao_Paulo

jobs:
  WR941NDv3:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checando
      uses: actions/checkout@master

    - name: Inicializando environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time build-essential libncurses5-dev gawk git libssl-dev gettext unzip zlib1g-dev file python libncurses5-dev zlib1g-dev mkisofs gawk antlr3 gperf build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
       

    - name: Clonando Codigo do Repositorio
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Atualizando os Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Instalando os Feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Carregando Configurações Personalizadas
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH

    - name: Conexão SSH para o Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download dos Pacotes
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Copilando o Firmaware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s V=s
        echo "::set-output name=status::success"

    - name: Upload do Diretorio BIN
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organizando os Arquivos
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"

    - name: Upload do Diretorio Do Firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: Echo
      run: echo "${{ env.FIRMWARE }}"

#    - name: Empacotando
#      run: |
#        cd openwrt/bin/targets/ar71xx/tiny
#        zip --junk-paths OpenWrt_WR941NDv3 -r *

    - name: Gerando Tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo ::set-env name=RELEASE_NAME::"$(TZ=UTC+3 date +"%d/%m/%Y-%H-%M-%S")-OpenWrt_WR941NDv3"
        echo ::set-env name=RELEASE_TAG::"$(TZ=UTC+3 date +"%d/%m/%Y-%H-%M-%S")"
        echo "Build Actions" >> release.txt
        echo "OpenWRT Tp-Link WR941NDv3" >> release.txt
        echo "© Sirherobrine23" >> release.txt
        echo "::set-output name=status::success"
    
    - name: Upload so Firmware para o Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        name: ${{ env.RELEASE_NAME }}
        tag_name: ${{ env.RELEASE_TAG }}
        body_path: release.txt
        files: openwrt/bin/targets/ar71xx/tiny/*